/* tslint:disable */
/* eslint-disable */
/**
 * CodePush API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AcquisitionReportStatusDeployPost200Response
 */
export interface AcquisitionReportStatusDeployPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPost200Response
     */
    'status': AcquisitionReportStatusDeployPost200ResponseStatusEnum;
}

export const AcquisitionReportStatusDeployPost200ResponseStatusEnum = {
    Ok: 'ok'
} as const;

export type AcquisitionReportStatusDeployPost200ResponseStatusEnum = typeof AcquisitionReportStatusDeployPost200ResponseStatusEnum[keyof typeof AcquisitionReportStatusDeployPost200ResponseStatusEnum];

/**
 * 
 * @export
 * @interface AcquisitionReportStatusDeployPostRequest
 */
export interface AcquisitionReportStatusDeployPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPostRequest
     */
    'deploymentKey': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPostRequest
     */
    'clientUniqueId': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPostRequest
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPostRequest
     */
    'appVersion': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPostRequest
     */
    'previousDeploymentKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPostRequest
     */
    'previousLabelOrAppVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDeployPostRequest
     */
    'status'?: AcquisitionReportStatusDeployPostRequestStatusEnum;
}

export const AcquisitionReportStatusDeployPostRequestStatusEnum = {
    DeploymentSucceeded: 'DeploymentSucceeded',
    DeploymentFailed: 'DeploymentFailed'
} as const;

export type AcquisitionReportStatusDeployPostRequestStatusEnum = typeof AcquisitionReportStatusDeployPostRequestStatusEnum[keyof typeof AcquisitionReportStatusDeployPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface AcquisitionReportStatusDownloadPostRequest
 */
export interface AcquisitionReportStatusDownloadPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDownloadPostRequest
     */
    'deploymentKey': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDownloadPostRequest
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionReportStatusDownloadPostRequest
     */
    'clientUniqueId': string;
}
/**
 * 
 * @export
 * @interface AcquisitionUpdateCheckGet200Response
 */
export interface AcquisitionUpdateCheckGet200Response {
    /**
     * 
     * @type {AcquisitionUpdateCheckGet200ResponseUpdateInfo}
     * @memberof AcquisitionUpdateCheckGet200Response
     */
    'updateInfo': AcquisitionUpdateCheckGet200ResponseUpdateInfo;
}
/**
 * 
 * @export
 * @interface AcquisitionUpdateCheckGet200ResponseUpdateInfo
 */
export interface AcquisitionUpdateCheckGet200ResponseUpdateInfo {
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'isAvailable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'isMandatory': boolean;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'appVersion': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'packageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'label'?: string;
    /**
     * 
     * @type {number}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'packageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'downloadUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'shouldRunBinaryVersion'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionUpdateCheckGet200ResponseUpdateInfo
     */
    'updateAppVersion'?: boolean;
}
/**
 * 
 * @export
 * @interface AcquisitionV01PublicCodepushUpdateCheckGet200Response
 */
export interface AcquisitionV01PublicCodepushUpdateCheckGet200Response {
    /**
     * 
     * @type {AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200Response
     */
    'update_info': AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo;
}
/**
 * 
 * @export
 * @interface AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
 */
export interface AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo {
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'is_available': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'is_mandatory': boolean;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'app_version': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'package_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'label'?: string;
    /**
     * 
     * @type {number}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'package_size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'download_url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'should_run_binary_version'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionV01PublicCodepushUpdateCheckGet200ResponseUpdateInfo
     */
    'update_app_version'?: boolean;
}
/**
 * 
 * @export
 * @interface AuthGithubCallbackGet400Response
 */
export interface AuthGithubCallbackGet400Response {
    /**
     * 
     * @type {string}
     * @memberof AuthGithubCallbackGet400Response
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof AuthGithubCallbackGet400Response
     */
    'error_description'?: string;
}
/**
 * 
 * @export
 * @interface ManagementAccessKeysAccessKeyNamePatchRequest
 */
export interface ManagementAccessKeysAccessKeyNamePatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysAccessKeyNamePatchRequest
     */
    'friendlyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ManagementAccessKeysAccessKeyNamePatchRequest
     */
    'ttl'?: number;
}
/**
 * 
 * @export
 * @interface ManagementAccessKeysGet200Response
 */
export interface ManagementAccessKeysGet200Response {
    /**
     * 
     * @type {Array<ManagementAccessKeysGet200ResponseAccessKeysInner>}
     * @memberof ManagementAccessKeysGet200Response
     */
    'accessKeys': Array<ManagementAccessKeysGet200ResponseAccessKeysInner>;
}
/**
 * 
 * @export
 * @interface ManagementAccessKeysGet200ResponseAccessKeysInner
 */
export interface ManagementAccessKeysGet200ResponseAccessKeysInner {
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'friendlyName': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'createdBy': string;
    /**
     * 
     * @type {number}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'createdTime': number;
    /**
     * 
     * @type {number}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'expires': number;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAccessKeysGet200ResponseAccessKeysInner
     */
    'isSession'?: boolean;
}
/**
 * 
 * @export
 * @interface ManagementAccessKeysPost201Response
 */
export interface ManagementAccessKeysPost201Response {
    /**
     * 
     * @type {ManagementAccessKeysGet200ResponseAccessKeysInner}
     * @memberof ManagementAccessKeysPost201Response
     */
    'accessKey': ManagementAccessKeysGet200ResponseAccessKeysInner;
}
/**
 * 
 * @export
 * @interface ManagementAccessKeysPostRequest
 */
export interface ManagementAccessKeysPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysPostRequest
     */
    'friendlyName': string;
    /**
     * 
     * @type {number}
     * @memberof ManagementAccessKeysPostRequest
     */
    'ttl'?: number;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccessKeysPostRequest
     */
    'createdBy'?: string;
}
/**
 * 
 * @export
 * @interface ManagementAccountGet200Response
 */
export interface ManagementAccountGet200Response {
    /**
     * 
     * @type {ManagementAccountGet200ResponseAccount}
     * @memberof ManagementAccountGet200Response
     */
    'account': ManagementAccountGet200ResponseAccount;
}
/**
 * 
 * @export
 * @interface ManagementAccountGet200ResponseAccount
 */
export interface ManagementAccountGet200ResponseAccount {
    /**
     * 
     * @type {string}
     * @memberof ManagementAccountGet200ResponseAccount
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccountGet200ResponseAccount
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccountGet200ResponseAccount
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ManagementAccountGet200ResponseAccount
     */
    'linkedProviders': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ManagementAccountGet200ResponseAccount
     */
    'gitHubId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ManagementAccountGet200ResponseAccount
     */
    'createdTime': number;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameCollaboratorsGet200Response
 */
export interface ManagementAppsAppNameCollaboratorsGet200Response {
    /**
     * 
     * @type {{ [key: string]: ManagementAppsGet200ResponseAppsInnerCollaboratorsValue; }}
     * @memberof ManagementAppsAppNameCollaboratorsGet200Response
     */
    'collaborators': { [key: string]: ManagementAppsGet200ResponseAppsInnerCollaboratorsValue; };
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200Response
 */
export interface ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200Response {
    /**
     * 
     * @type {{ [key: string]: ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue; }}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200Response
     */
    'metrics': { [key: string]: ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue; };
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue
 */
export interface ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue {
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue
     */
    'active': number;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue
     */
    'downloads'?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue
     */
    'installed'?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200ResponseMetricsValue
     */
    'failed'?: number;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response
 */
export interface ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response {
    /**
     * 
     * @type {ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response
     */
    'package': ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
 */
export interface ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'appVersion': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'blobUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue; }}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'diffPackageMap'?: { [key: string]: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue; };
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'isDisabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'isMandatory': boolean;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'manifestBlobUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'originalDeployment'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'originalLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'packageHash': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'releasedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'releaseMethod'?: ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackageReleaseMethodEnum;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'rollout'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackage
     */
    'uploadTime': number;
}

export const ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackageReleaseMethodEnum = {
    Upload: 'Upload',
    Promote: 'Promote',
    Rollback: 'Rollback'
} as const;

export type ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackageReleaseMethodEnum = typeof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackageReleaseMethodEnum[keyof typeof ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201ResponsePackageReleaseMethodEnum];

/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsGet200Response
 */
export interface ManagementAppsAppNameDeploymentsGet200Response {
    /**
     * 
     * @type {Array<ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner>}
     * @memberof ManagementAppsAppNameDeploymentsGet200Response
     */
    'deployments': Array<ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner>;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner
 */
export interface ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner
     */
    'key'?: string;
    /**
     * 
     * @type {ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner
     */
    'package'?: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage | null;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner
     */
    'createdTime': number;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
 */
export interface ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'appVersion': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'blobUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue; }}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'diffPackageMap'?: { [key: string]: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue; };
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'isDisabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'isMandatory': boolean;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'manifestBlobUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'originalDeployment'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'originalLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'packageHash': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'releasedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'releaseMethod'?: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageReleaseMethodEnum;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'rollout'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackage
     */
    'uploadTime': number;
}

export const ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageReleaseMethodEnum = {
    Upload: 'Upload',
    Promote: 'Promote',
    Rollback: 'Rollback'
} as const;

export type ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageReleaseMethodEnum = typeof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageReleaseMethodEnum[keyof typeof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageReleaseMethodEnum];

/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue
 */
export interface ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue {
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsPost201Response
 */
export interface ManagementAppsAppNameDeploymentsPost201Response {
    /**
     * 
     * @type {ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner}
     * @memberof ManagementAppsAppNameDeploymentsPost201Response
     */
    'deployment': ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInner;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsPostRequest
 */
export interface ManagementAppsAppNameDeploymentsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsPostRequest
     */
    'key'?: string;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest
 */
export interface ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest {
    /**
     * 
     * @type {ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest
     */
    'packageInfo'?: ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo;
}
/**
 * 
 * @export
 * @interface ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
 */
export interface ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'appVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'blobUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue; }}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'diffPackageMap'?: { [key: string]: ManagementAppsAppNameDeploymentsGet200ResponseDeploymentsInnerPackageDiffPackageMapValue; };
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'isDisabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'isMandatory'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'manifestBlobUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'originalDeployment'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'originalLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'packageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'releasedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'releaseMethod'?: ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfoReleaseMethodEnum;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'rollout'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfo
     */
    'uploadTime'?: number;
}

export const ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfoReleaseMethodEnum = {
    Upload: 'Upload',
    Promote: 'Promote',
    Rollback: 'Rollback'
} as const;

export type ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfoReleaseMethodEnum = typeof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfoReleaseMethodEnum[keyof typeof ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequestPackageInfoReleaseMethodEnum];

/**
 * 
 * @export
 * @interface ManagementAppsAppNamePatchRequest
 */
export interface ManagementAppsAppNamePatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsAppNamePatchRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ManagementAppsGet200Response
 */
export interface ManagementAppsGet200Response {
    /**
     * 
     * @type {Array<ManagementAppsGet200ResponseAppsInner>}
     * @memberof ManagementAppsGet200Response
     */
    'apps': Array<ManagementAppsGet200ResponseAppsInner>;
}
/**
 * 
 * @export
 * @interface ManagementAppsGet200ResponseAppsInner
 */
export interface ManagementAppsGet200ResponseAppsInner {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsGet200ResponseAppsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsGet200ResponseAppsInner
     */
    'name': string;
    /**
     * 
     * @type {{ [key: string]: ManagementAppsGet200ResponseAppsInnerCollaboratorsValue; }}
     * @memberof ManagementAppsGet200ResponseAppsInner
     */
    'collaborators'?: { [key: string]: ManagementAppsGet200ResponseAppsInnerCollaboratorsValue; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ManagementAppsGet200ResponseAppsInner
     */
    'deployments': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ManagementAppsGet200ResponseAppsInner
     */
    'createdTime': number;
}
/**
 * 
 * @export
 * @interface ManagementAppsGet200ResponseAppsInnerCollaboratorsValue
 */
export interface ManagementAppsGet200ResponseAppsInnerCollaboratorsValue {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsGet200ResponseAppsInnerCollaboratorsValue
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsGet200ResponseAppsInnerCollaboratorsValue
     */
    'permission': ManagementAppsGet200ResponseAppsInnerCollaboratorsValuePermissionEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsGet200ResponseAppsInnerCollaboratorsValue
     */
    'isCurrentAccount'?: boolean | null;
}

export const ManagementAppsGet200ResponseAppsInnerCollaboratorsValuePermissionEnum = {
    Owner: 'Owner',
    Collaborator: 'Collaborator'
} as const;

export type ManagementAppsGet200ResponseAppsInnerCollaboratorsValuePermissionEnum = typeof ManagementAppsGet200ResponseAppsInnerCollaboratorsValuePermissionEnum[keyof typeof ManagementAppsGet200ResponseAppsInnerCollaboratorsValuePermissionEnum];

/**
 * 
 * @export
 * @interface ManagementAppsPost201Response
 */
export interface ManagementAppsPost201Response {
    /**
     * 
     * @type {ManagementAppsGet200ResponseAppsInner}
     * @memberof ManagementAppsPost201Response
     */
    'app': ManagementAppsGet200ResponseAppsInner;
}
/**
 * 
 * @export
 * @interface ManagementAppsPostRequest
 */
export interface ManagementAppsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ManagementAppsPostRequest
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ManagementAppsPostRequest
     */
    'manuallyProvisionDeployments'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionReportStatusDeployPost: async (acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/acquisition/reportStatus/deploy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acquisitionReportStatusDeployPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionReportStatusDownloadPost: async (acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/acquisition/reportStatus/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acquisitionReportStatusDownloadPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [deploymentKey] 
         * @param {string} [deploymentKey2] 
         * @param {string} [appVersion] 
         * @param {string} [appVersion2] 
         * @param {string} [packageHash] 
         * @param {string} [packageHash2] 
         * @param {string} [label] 
         * @param {string} [clientUniqueId] 
         * @param {string} [clientUniqueId2] 
         * @param {boolean} [isCompanion] 
         * @param {boolean} [isCompanion2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionUpdateCheckGet: async (deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/acquisition/updateCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deploymentKey !== undefined) {
                localVarQueryParameter['deploymentKey'] = deploymentKey;
            }

            if (deploymentKey2 !== undefined) {
                localVarQueryParameter['deployment_key'] = deploymentKey2;
            }

            if (appVersion !== undefined) {
                localVarQueryParameter['appVersion'] = appVersion;
            }

            if (appVersion2 !== undefined) {
                localVarQueryParameter['app_version'] = appVersion2;
            }

            if (packageHash !== undefined) {
                localVarQueryParameter['packageHash'] = packageHash;
            }

            if (packageHash2 !== undefined) {
                localVarQueryParameter['package_hash'] = packageHash2;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (clientUniqueId !== undefined) {
                localVarQueryParameter['clientUniqueId'] = clientUniqueId;
            }

            if (clientUniqueId2 !== undefined) {
                localVarQueryParameter['client_unique_id'] = clientUniqueId2;
            }

            if (isCompanion !== undefined) {
                localVarQueryParameter['isCompanion'] = isCompanion;
            }

            if (isCompanion2 !== undefined) {
                localVarQueryParameter['is_companion'] = isCompanion2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionV01PublicCodepushReportStatusDeployPost: async (acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/acquisition/v0.1/public/codepush/report_status/deploy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acquisitionReportStatusDeployPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionV01PublicCodepushReportStatusDownloadPost: async (acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/acquisition/v0.1/public/codepush/report_status/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acquisitionReportStatusDownloadPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [deploymentKey] 
         * @param {string} [deploymentKey2] 
         * @param {string} [appVersion] 
         * @param {string} [appVersion2] 
         * @param {string} [packageHash] 
         * @param {string} [packageHash2] 
         * @param {string} [label] 
         * @param {string} [clientUniqueId] 
         * @param {string} [clientUniqueId2] 
         * @param {boolean} [isCompanion] 
         * @param {boolean} [isCompanion2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionV01PublicCodepushUpdateCheckGet: async (deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/acquisition/v0.1/public/codepush/update_check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deploymentKey !== undefined) {
                localVarQueryParameter['deploymentKey'] = deploymentKey;
            }

            if (deploymentKey2 !== undefined) {
                localVarQueryParameter['deployment_key'] = deploymentKey2;
            }

            if (appVersion !== undefined) {
                localVarQueryParameter['appVersion'] = appVersion;
            }

            if (appVersion2 !== undefined) {
                localVarQueryParameter['app_version'] = appVersion2;
            }

            if (packageHash !== undefined) {
                localVarQueryParameter['packageHash'] = packageHash;
            }

            if (packageHash2 !== undefined) {
                localVarQueryParameter['package_hash'] = packageHash2;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (clientUniqueId !== undefined) {
                localVarQueryParameter['clientUniqueId'] = clientUniqueId;
            }

            if (clientUniqueId2 !== undefined) {
                localVarQueryParameter['client_unique_id'] = clientUniqueId2;
            }

            if (isCompanion !== undefined) {
                localVarQueryParameter['isCompanion'] = isCompanion;
            }

            if (isCompanion2 !== undefined) {
                localVarQueryParameter['is_companion'] = isCompanion2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGithubCallbackGet: async (code: string, state?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('authGithubCallbackGet', 'code', code)
            const localVarPath = `/auth/github/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGithubLoginGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/github/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysAccessKeyNameDelete: async (accessKeyName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessKeyName' is not null or undefined
            assertParamExists('managementAccessKeysAccessKeyNameDelete', 'accessKeyName', accessKeyName)
            const localVarPath = `/management/accessKeys/:accessKeyName`
                .replace(`{${"accessKeyName"}}`, encodeURIComponent(String(accessKeyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysAccessKeyNameGet: async (accessKeyName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessKeyName' is not null or undefined
            assertParamExists('managementAccessKeysAccessKeyNameGet', 'accessKeyName', accessKeyName)
            const localVarPath = `/management/accessKeys/:accessKeyName`
                .replace(`{${"accessKeyName"}}`, encodeURIComponent(String(accessKeyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {ManagementAccessKeysAccessKeyNamePatchRequest} [managementAccessKeysAccessKeyNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysAccessKeyNamePatch: async (accessKeyName: string, managementAccessKeysAccessKeyNamePatchRequest?: ManagementAccessKeysAccessKeyNamePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessKeyName' is not null or undefined
            assertParamExists('managementAccessKeysAccessKeyNamePatch', 'accessKeyName', accessKeyName)
            const localVarPath = `/management/accessKeys/:accessKeyName`
                .replace(`{${"accessKeyName"}}`, encodeURIComponent(String(accessKeyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managementAccessKeysAccessKeyNamePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/accessKeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ManagementAccessKeysPostRequest} [managementAccessKeysPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysPost: async (managementAccessKeysPostRequest?: ManagementAccessKeysPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/accessKeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managementAccessKeysPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove collaborator from app
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameCollaboratorsEmailDelete: async (appName: string, email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameCollaboratorsEmailDelete', 'appName', appName)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('managementAppsAppNameCollaboratorsEmailDelete', 'email', email)
            const localVarPath = `/management/apps/:appName/collaborators/:email`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add collaborator to app
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameCollaboratorsEmailPost: async (appName: string, email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameCollaboratorsEmailPost', 'appName', appName)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('managementAppsAppNameCollaboratorsEmailPost', 'email', email)
            const localVarPath = `/management/apps/:appName/collaborators/:email`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List app collaborators
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameCollaboratorsGet: async (appName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameCollaboratorsGet', 'appName', appName)
            const localVarPath = `/management/apps/:appName/collaborators`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an app
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDelete: async (appName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDelete', 'appName', appName)
            const localVarPath = `/management/apps/:appName`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove deployment
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameDelete: async (appName: string, deploymentName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameDelete', 'appName', appName)
            // verify required parameter 'deploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameDelete', 'deploymentName', deploymentName)
            const localVarPath = `/management/apps/:appName/deployments/:deploymentName`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"deploymentName"}}`, encodeURIComponent(String(deploymentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get deployment details
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameGet: async (appName: string, deploymentName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameGet', 'appName', appName)
            // verify required parameter 'deploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameGet', 'deploymentName', deploymentName)
            const localVarPath = `/management/apps/:appName/deployments/:deploymentName`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"deploymentName"}}`, encodeURIComponent(String(deploymentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get deployment metrics
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameMetricsGet: async (appName: string, deploymentName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameMetricsGet', 'appName', appName)
            // verify required parameter 'deploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameMetricsGet', 'deploymentName', deploymentName)
            const localVarPath = `/management/apps/:appName/deployments/:deploymentName/metrics`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"deploymentName"}}`, encodeURIComponent(String(deploymentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update deployment
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNamePatch: async (appName: string, deploymentName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNamePatch', 'appName', appName)
            // verify required parameter 'deploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNamePatch', 'deploymentName', deploymentName)
            const localVarPath = `/management/apps/:appName/deployments/:deploymentName`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"deploymentName"}}`, encodeURIComponent(String(deploymentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managementAppsAppNamePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Release new package version
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {any} _package 
         * @param {string} packageInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameReleasePost: async (appName: string, deploymentName: string, _package: any, packageInfo: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameReleasePost', 'appName', appName)
            // verify required parameter 'deploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameReleasePost', 'deploymentName', deploymentName)
            // verify required parameter '_package' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameReleasePost', '_package', _package)
            // verify required parameter 'packageInfo' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameReleasePost', 'packageInfo', packageInfo)
            const localVarPath = `/management/apps/:appName/deployments/:deploymentName/release`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"deploymentName"}}`, encodeURIComponent(String(deploymentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (_package !== undefined) { 
                localVarFormParams.append('package', new Blob([JSON.stringify(_package)], { type: "application/json", }));
            }
    
            if (packageInfo !== undefined) { 
                localVarFormParams.append('packageInfo', packageInfo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rollback deployment to previous release
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {string} [targetRelease] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost: async (appName: string, deploymentName: string, targetRelease?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost', 'appName', appName)
            // verify required parameter 'deploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost', 'deploymentName', deploymentName)
            const localVarPath = `/management/apps/:appName/deployments/:deploymentName/rollback/:targetRelease?`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"deploymentName"}}`, encodeURIComponent(String(deploymentName)))
                .replace(`{${"targetRelease"}}`, encodeURIComponent(String(targetRelease)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List app deployments
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsGet: async (appName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsGet', 'appName', appName)
            const localVarPath = `/management/apps/:appName/deployments`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new deployment
         * @param {string} appName 
         * @param {ManagementAppsAppNameDeploymentsPostRequest} [managementAppsAppNameDeploymentsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsPost: async (appName: string, managementAppsAppNameDeploymentsPostRequest?: ManagementAppsAppNameDeploymentsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsPost', 'appName', appName)
            const localVarPath = `/management/apps/:appName/deployments`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managementAppsAppNameDeploymentsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Promote deployment to another deployment
         * @param {string} appName 
         * @param {string} sourceDeploymentName 
         * @param {string} destDeploymentName 
         * @param {ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest} [managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost: async (appName: string, sourceDeploymentName: string, destDeploymentName: string, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest?: ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost', 'appName', appName)
            // verify required parameter 'sourceDeploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost', 'sourceDeploymentName', sourceDeploymentName)
            // verify required parameter 'destDeploymentName' is not null or undefined
            assertParamExists('managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost', 'destDeploymentName', destDeploymentName)
            const localVarPath = `/management/apps/:appName/deployments/:sourceDeploymentName/promote/:destDeploymentName`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"sourceDeploymentName"}}`, encodeURIComponent(String(sourceDeploymentName)))
                .replace(`{${"destDeploymentName"}}`, encodeURIComponent(String(destDeploymentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get app details
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameGet: async (appName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameGet', 'appName', appName)
            const localVarPath = `/management/apps/:appName`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update app details
         * @param {string} appName 
         * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNamePatch: async (appName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNamePatch', 'appName', appName)
            const localVarPath = `/management/apps/:appName`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managementAppsAppNamePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer app ownership
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameTransferEmailPost: async (appName: string, email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('managementAppsAppNameTransferEmailPost', 'appName', appName)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('managementAppsAppNameTransferEmailPost', 'email', email)
            const localVarPath = `/management/apps/:appName/transfer/:email`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ManagementAppsPostRequest} [managementAppsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsPost: async (managementAppsPostRequest?: ManagementAppsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managementAppsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquisitionReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcquisitionReportStatusDeployPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquisitionReportStatusDeployPost(acquisitionReportStatusDeployPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acquisitionReportStatusDeployPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquisitionReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcquisitionReportStatusDeployPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquisitionReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acquisitionReportStatusDownloadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [deploymentKey] 
         * @param {string} [deploymentKey2] 
         * @param {string} [appVersion] 
         * @param {string} [appVersion2] 
         * @param {string} [packageHash] 
         * @param {string} [packageHash2] 
         * @param {string} [label] 
         * @param {string} [clientUniqueId] 
         * @param {string} [clientUniqueId2] 
         * @param {boolean} [isCompanion] 
         * @param {boolean} [isCompanion2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquisitionUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcquisitionUpdateCheckGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquisitionUpdateCheckGet(deploymentKey, deploymentKey2, appVersion, appVersion2, packageHash, packageHash2, label, clientUniqueId, clientUniqueId2, isCompanion, isCompanion2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acquisitionUpdateCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquisitionV01PublicCodepushReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcquisitionReportStatusDeployPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquisitionV01PublicCodepushReportStatusDeployPost(acquisitionReportStatusDeployPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acquisitionV01PublicCodepushReportStatusDeployPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquisitionV01PublicCodepushReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcquisitionReportStatusDeployPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquisitionV01PublicCodepushReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acquisitionV01PublicCodepushReportStatusDownloadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [deploymentKey] 
         * @param {string} [deploymentKey2] 
         * @param {string} [appVersion] 
         * @param {string} [appVersion2] 
         * @param {string} [packageHash] 
         * @param {string} [packageHash2] 
         * @param {string} [label] 
         * @param {string} [clientUniqueId] 
         * @param {string} [clientUniqueId2] 
         * @param {boolean} [isCompanion] 
         * @param {boolean} [isCompanion2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquisitionV01PublicCodepushUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcquisitionV01PublicCodepushUpdateCheckGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquisitionV01PublicCodepushUpdateCheckGet(deploymentKey, deploymentKey2, appVersion, appVersion2, packageHash, packageHash2, label, clientUniqueId, clientUniqueId2, isCompanion, isCompanion2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acquisitionV01PublicCodepushUpdateCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGithubCallbackGet(code: string, state?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGithubCallbackGet(code, state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authGithubCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGithubLoginGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGithubLoginGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authGithubLoginGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authLogoutGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAccessKeysAccessKeyNameDelete(accessKeyName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAccessKeysAccessKeyNameDelete(accessKeyName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAccessKeysAccessKeyNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAccessKeysAccessKeyNameGet(accessKeyName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAccessKeysPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAccessKeysAccessKeyNameGet(accessKeyName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAccessKeysAccessKeyNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {ManagementAccessKeysAccessKeyNamePatchRequest} [managementAccessKeysAccessKeyNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAccessKeysAccessKeyNamePatch(accessKeyName: string, managementAccessKeysAccessKeyNamePatchRequest?: ManagementAccessKeysAccessKeyNamePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAccessKeysPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAccessKeysAccessKeyNamePatch(accessKeyName, managementAccessKeysAccessKeyNamePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAccessKeysAccessKeyNamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAccessKeysGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAccessKeysGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAccessKeysGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAccessKeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ManagementAccessKeysPostRequest} [managementAccessKeysPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAccessKeysPost(managementAccessKeysPostRequest?: ManagementAccessKeysPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAccessKeysPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAccessKeysPost(managementAccessKeysPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAccessKeysPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAccountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAccountGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAccountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAccountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove collaborator from app
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameCollaboratorsEmailDelete(appName: string, email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameCollaboratorsEmailDelete(appName, email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameCollaboratorsEmailDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add collaborator to app
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameCollaboratorsEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameCollaboratorsEmailPost(appName, email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameCollaboratorsEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List app collaborators
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameCollaboratorsGet(appName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameCollaboratorsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameCollaboratorsGet(appName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameCollaboratorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an app
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDelete(appName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDelete(appName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove deployment
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsDeploymentNameDelete(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsDeploymentNameDelete(appName, deploymentName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsDeploymentNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get deployment details
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsDeploymentNameGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsDeploymentNameGet(appName, deploymentName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsDeploymentNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get deployment metrics
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsDeploymentNameMetricsGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsDeploymentNameMetricsGet(appName, deploymentName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsDeploymentNameMetricsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update deployment
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsDeploymentNamePatch(appName: string, deploymentName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsDeploymentNamePatch(appName, deploymentName, managementAppsAppNamePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsDeploymentNamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Release new package version
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {any} _package 
         * @param {string} packageInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsDeploymentNameReleasePost(appName: string, deploymentName: string, _package: any, packageInfo: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsDeploymentNameReleasePost(appName, deploymentName, _package, packageInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsDeploymentNameReleasePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rollback deployment to previous release
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {string} [targetRelease] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost(appName: string, deploymentName: string, targetRelease?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost(appName, deploymentName, targetRelease, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List app deployments
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsGet(appName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsGet(appName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create new deployment
         * @param {string} appName 
         * @param {ManagementAppsAppNameDeploymentsPostRequest} [managementAppsAppNameDeploymentsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsPost(appName: string, managementAppsAppNameDeploymentsPostRequest?: ManagementAppsAppNameDeploymentsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsPost(appName, managementAppsAppNameDeploymentsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Promote deployment to another deployment
         * @param {string} appName 
         * @param {string} sourceDeploymentName 
         * @param {string} destDeploymentName 
         * @param {ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest} [managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost(appName: string, sourceDeploymentName: string, destDeploymentName: string, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest?: ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost(appName, sourceDeploymentName, destDeploymentName, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get app details
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameGet(appName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameGet(appName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update app details
         * @param {string} appName 
         * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNamePatch(appName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNamePatch(appName, managementAppsAppNamePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer app ownership
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsAppNameTransferEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsAppNameTransferEmailPost(appName, email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsAppNameTransferEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ManagementAppsPostRequest} [managementAppsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managementAppsPost(managementAppsPostRequest?: ManagementAppsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagementAppsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managementAppsPost(managementAppsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.managementAppsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response> {
            return localVarFp.acquisitionReportStatusDeployPost(acquisitionReportStatusDeployPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response> {
            return localVarFp.acquisitionReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [deploymentKey] 
         * @param {string} [deploymentKey2] 
         * @param {string} [appVersion] 
         * @param {string} [appVersion2] 
         * @param {string} [packageHash] 
         * @param {string} [packageHash2] 
         * @param {string} [label] 
         * @param {string} [clientUniqueId] 
         * @param {string} [clientUniqueId2] 
         * @param {boolean} [isCompanion] 
         * @param {boolean} [isCompanion2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionUpdateCheckGet200Response> {
            return localVarFp.acquisitionUpdateCheckGet(deploymentKey, deploymentKey2, appVersion, appVersion2, packageHash, packageHash2, label, clientUniqueId, clientUniqueId2, isCompanion, isCompanion2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionV01PublicCodepushReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response> {
            return localVarFp.acquisitionV01PublicCodepushReportStatusDeployPost(acquisitionReportStatusDeployPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionV01PublicCodepushReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response> {
            return localVarFp.acquisitionV01PublicCodepushReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [deploymentKey] 
         * @param {string} [deploymentKey2] 
         * @param {string} [appVersion] 
         * @param {string} [appVersion2] 
         * @param {string} [packageHash] 
         * @param {string} [packageHash2] 
         * @param {string} [label] 
         * @param {string} [clientUniqueId] 
         * @param {string} [clientUniqueId2] 
         * @param {boolean} [isCompanion] 
         * @param {boolean} [isCompanion2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquisitionV01PublicCodepushUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionV01PublicCodepushUpdateCheckGet200Response> {
            return localVarFp.acquisitionV01PublicCodepushUpdateCheckGet(deploymentKey, deploymentKey2, appVersion, appVersion2, packageHash, packageHash2, label, clientUniqueId, clientUniqueId2, isCompanion, isCompanion2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGithubCallbackGet(code: string, state?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authGithubCallbackGet(code, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGithubLoginGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authGithubLoginGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authLogoutGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysAccessKeyNameDelete(accessKeyName: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.managementAccessKeysAccessKeyNameDelete(accessKeyName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysAccessKeyNameGet(accessKeyName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysPost201Response> {
            return localVarFp.managementAccessKeysAccessKeyNameGet(accessKeyName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accessKeyName 
         * @param {ManagementAccessKeysAccessKeyNamePatchRequest} [managementAccessKeysAccessKeyNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysAccessKeyNamePatch(accessKeyName: string, managementAccessKeysAccessKeyNamePatchRequest?: ManagementAccessKeysAccessKeyNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysPost201Response> {
            return localVarFp.managementAccessKeysAccessKeyNamePatch(accessKeyName, managementAccessKeysAccessKeyNamePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysGet200Response> {
            return localVarFp.managementAccessKeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ManagementAccessKeysPostRequest} [managementAccessKeysPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccessKeysPost(managementAccessKeysPostRequest?: ManagementAccessKeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysPost201Response> {
            return localVarFp.managementAccessKeysPost(managementAccessKeysPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAccountGet(options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccountGet200Response> {
            return localVarFp.managementAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Remove collaborator from app
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameCollaboratorsEmailDelete(appName: string, email: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.managementAppsAppNameCollaboratorsEmailDelete(appName, email, options).then((request) => request(axios, basePath));
        },
        /**
         * Add collaborator to app
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameCollaboratorsEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.managementAppsAppNameCollaboratorsEmailPost(appName, email, options).then((request) => request(axios, basePath));
        },
        /**
         * List app collaborators
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameCollaboratorsGet(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameCollaboratorsGet200Response> {
            return localVarFp.managementAppsAppNameCollaboratorsGet(appName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an app
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDelete(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.managementAppsAppNameDelete(appName, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove deployment
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameDelete(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.managementAppsAppNameDeploymentsDeploymentNameDelete(appName, deploymentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get deployment details
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response> {
            return localVarFp.managementAppsAppNameDeploymentsDeploymentNameGet(appName, deploymentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get deployment metrics
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameMetricsGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200Response> {
            return localVarFp.managementAppsAppNameDeploymentsDeploymentNameMetricsGet(appName, deploymentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Update deployment
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNamePatch(appName: string, deploymentName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response> {
            return localVarFp.managementAppsAppNameDeploymentsDeploymentNamePatch(appName, deploymentName, managementAppsAppNamePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Release new package version
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {any} _package 
         * @param {string} packageInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameReleasePost(appName: string, deploymentName: string, _package: any, packageInfo: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response> {
            return localVarFp.managementAppsAppNameDeploymentsDeploymentNameReleasePost(appName, deploymentName, _package, packageInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * Rollback deployment to previous release
         * @param {string} appName 
         * @param {string} deploymentName 
         * @param {string} [targetRelease] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost(appName: string, deploymentName: string, targetRelease?: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response> {
            return localVarFp.managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost(appName, deploymentName, targetRelease, options).then((request) => request(axios, basePath));
        },
        /**
         * List app deployments
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsGet(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsGet200Response> {
            return localVarFp.managementAppsAppNameDeploymentsGet(appName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new deployment
         * @param {string} appName 
         * @param {ManagementAppsAppNameDeploymentsPostRequest} [managementAppsAppNameDeploymentsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsPost(appName: string, managementAppsAppNameDeploymentsPostRequest?: ManagementAppsAppNameDeploymentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response> {
            return localVarFp.managementAppsAppNameDeploymentsPost(appName, managementAppsAppNameDeploymentsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Promote deployment to another deployment
         * @param {string} appName 
         * @param {string} sourceDeploymentName 
         * @param {string} destDeploymentName 
         * @param {ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest} [managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost(appName: string, sourceDeploymentName: string, destDeploymentName: string, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest?: ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response> {
            return localVarFp.managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost(appName, sourceDeploymentName, destDeploymentName, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get app details
         * @param {string} appName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameGet(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsPost201Response> {
            return localVarFp.managementAppsAppNameGet(appName, options).then((request) => request(axios, basePath));
        },
        /**
         * Update app details
         * @param {string} appName 
         * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNamePatch(appName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsPost201Response> {
            return localVarFp.managementAppsAppNamePatch(appName, managementAppsAppNamePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer app ownership
         * @param {string} appName 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsAppNameTransferEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.managementAppsAppNameTransferEmailPost(appName, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsGet(options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsGet200Response> {
            return localVarFp.managementAppsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ManagementAppsPostRequest} [managementAppsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managementAppsPost(managementAppsPostRequest?: ManagementAppsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsPost201Response> {
            return localVarFp.managementAppsPost(managementAppsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    acquisitionReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response>;

    /**
     * 
     * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    acquisitionReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response>;

    /**
     * 
     * @param {string} [deploymentKey] 
     * @param {string} [deploymentKey2] 
     * @param {string} [appVersion] 
     * @param {string} [appVersion2] 
     * @param {string} [packageHash] 
     * @param {string} [packageHash2] 
     * @param {string} [label] 
     * @param {string} [clientUniqueId] 
     * @param {string} [clientUniqueId2] 
     * @param {boolean} [isCompanion] 
     * @param {boolean} [isCompanion2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    acquisitionUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionUpdateCheckGet200Response>;

    /**
     * 
     * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    acquisitionV01PublicCodepushReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response>;

    /**
     * 
     * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    acquisitionV01PublicCodepushReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionReportStatusDeployPost200Response>;

    /**
     * 
     * @param {string} [deploymentKey] 
     * @param {string} [deploymentKey2] 
     * @param {string} [appVersion] 
     * @param {string} [appVersion2] 
     * @param {string} [packageHash] 
     * @param {string} [packageHash2] 
     * @param {string} [label] 
     * @param {string} [clientUniqueId] 
     * @param {string} [clientUniqueId2] 
     * @param {boolean} [isCompanion] 
     * @param {boolean} [isCompanion2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    acquisitionV01PublicCodepushUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AcquisitionV01PublicCodepushUpdateCheckGet200Response>;

    /**
     * 
     * @param {string} code 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    authGithubCallbackGet(code: string, state?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    authGithubLoginGet(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    authLogoutGet(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} accessKeyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAccessKeysAccessKeyNameDelete(accessKeyName: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} accessKeyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAccessKeysAccessKeyNameGet(accessKeyName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysPost201Response>;

    /**
     * 
     * @param {string} accessKeyName 
     * @param {ManagementAccessKeysAccessKeyNamePatchRequest} [managementAccessKeysAccessKeyNamePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAccessKeysAccessKeyNamePatch(accessKeyName: string, managementAccessKeysAccessKeyNamePatchRequest?: ManagementAccessKeysAccessKeyNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysPost201Response>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAccessKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysGet200Response>;

    /**
     * 
     * @param {ManagementAccessKeysPostRequest} [managementAccessKeysPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAccessKeysPost(managementAccessKeysPostRequest?: ManagementAccessKeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccessKeysPost201Response>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAccountGet(options?: RawAxiosRequestConfig): AxiosPromise<ManagementAccountGet200Response>;

    /**
     * Remove collaborator from app
     * @param {string} appName 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameCollaboratorsEmailDelete(appName: string, email: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Add collaborator to app
     * @param {string} appName 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameCollaboratorsEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * List app collaborators
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameCollaboratorsGet(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameCollaboratorsGet200Response>;

    /**
     * Delete an app
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDelete(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Remove deployment
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsDeploymentNameDelete(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get deployment details
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsDeploymentNameGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response>;

    /**
     * Get deployment metrics
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsDeploymentNameMetricsGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameMetricsGet200Response>;

    /**
     * Update deployment
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsDeploymentNamePatch(appName: string, deploymentName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response>;

    /**
     * Release new package version
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {any} _package 
     * @param {string} packageInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsDeploymentNameReleasePost(appName: string, deploymentName: string, _package: any, packageInfo: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response>;

    /**
     * Rollback deployment to previous release
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {string} [targetRelease] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost(appName: string, deploymentName: string, targetRelease?: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response>;

    /**
     * List app deployments
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsGet(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsGet200Response>;

    /**
     * Create new deployment
     * @param {string} appName 
     * @param {ManagementAppsAppNameDeploymentsPostRequest} [managementAppsAppNameDeploymentsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsPost(appName: string, managementAppsAppNameDeploymentsPostRequest?: ManagementAppsAppNameDeploymentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsPost201Response>;

    /**
     * Promote deployment to another deployment
     * @param {string} appName 
     * @param {string} sourceDeploymentName 
     * @param {string} destDeploymentName 
     * @param {ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest} [managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost(appName: string, sourceDeploymentName: string, destDeploymentName: string, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest?: ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsAppNameDeploymentsDeploymentNameReleasePost201Response>;

    /**
     * Get app details
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameGet(appName: string, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsPost201Response>;

    /**
     * Update app details
     * @param {string} appName 
     * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNamePatch(appName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsPost201Response>;

    /**
     * Transfer app ownership
     * @param {string} appName 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsAppNameTransferEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsGet(options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsGet200Response>;

    /**
     * 
     * @param {ManagementAppsPostRequest} [managementAppsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    managementAppsPost(managementAppsPostRequest?: ManagementAppsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManagementAppsPost201Response>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acquisitionReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acquisitionReportStatusDeployPost(acquisitionReportStatusDeployPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acquisitionReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acquisitionReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [deploymentKey] 
     * @param {string} [deploymentKey2] 
     * @param {string} [appVersion] 
     * @param {string} [appVersion2] 
     * @param {string} [packageHash] 
     * @param {string} [packageHash2] 
     * @param {string} [label] 
     * @param {string} [clientUniqueId] 
     * @param {string} [clientUniqueId2] 
     * @param {boolean} [isCompanion] 
     * @param {boolean} [isCompanion2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acquisitionUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acquisitionUpdateCheckGet(deploymentKey, deploymentKey2, appVersion, appVersion2, packageHash, packageHash2, label, clientUniqueId, clientUniqueId2, isCompanion, isCompanion2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AcquisitionReportStatusDeployPostRequest} [acquisitionReportStatusDeployPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acquisitionV01PublicCodepushReportStatusDeployPost(acquisitionReportStatusDeployPostRequest?: AcquisitionReportStatusDeployPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acquisitionV01PublicCodepushReportStatusDeployPost(acquisitionReportStatusDeployPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AcquisitionReportStatusDownloadPostRequest} [acquisitionReportStatusDownloadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acquisitionV01PublicCodepushReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest?: AcquisitionReportStatusDownloadPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acquisitionV01PublicCodepushReportStatusDownloadPost(acquisitionReportStatusDownloadPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [deploymentKey] 
     * @param {string} [deploymentKey2] 
     * @param {string} [appVersion] 
     * @param {string} [appVersion2] 
     * @param {string} [packageHash] 
     * @param {string} [packageHash2] 
     * @param {string} [label] 
     * @param {string} [clientUniqueId] 
     * @param {string} [clientUniqueId2] 
     * @param {boolean} [isCompanion] 
     * @param {boolean} [isCompanion2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acquisitionV01PublicCodepushUpdateCheckGet(deploymentKey?: string, deploymentKey2?: string, appVersion?: string, appVersion2?: string, packageHash?: string, packageHash2?: string, label?: string, clientUniqueId?: string, clientUniqueId2?: string, isCompanion?: boolean, isCompanion2?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acquisitionV01PublicCodepushUpdateCheckGet(deploymentKey, deploymentKey2, appVersion, appVersion2, packageHash, packageHash2, label, clientUniqueId, clientUniqueId2, isCompanion, isCompanion2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authGithubCallbackGet(code: string, state?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authGithubCallbackGet(code, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authGithubLoginGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authGithubLoginGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLogoutGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLogoutGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accessKeyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAccessKeysAccessKeyNameDelete(accessKeyName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAccessKeysAccessKeyNameDelete(accessKeyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accessKeyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAccessKeysAccessKeyNameGet(accessKeyName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAccessKeysAccessKeyNameGet(accessKeyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accessKeyName 
     * @param {ManagementAccessKeysAccessKeyNamePatchRequest} [managementAccessKeysAccessKeyNamePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAccessKeysAccessKeyNamePatch(accessKeyName: string, managementAccessKeysAccessKeyNamePatchRequest?: ManagementAccessKeysAccessKeyNamePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAccessKeysAccessKeyNamePatch(accessKeyName, managementAccessKeysAccessKeyNamePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAccessKeysGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAccessKeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ManagementAccessKeysPostRequest} [managementAccessKeysPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAccessKeysPost(managementAccessKeysPostRequest?: ManagementAccessKeysPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAccessKeysPost(managementAccessKeysPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAccountGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAccountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove collaborator from app
     * @param {string} appName 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameCollaboratorsEmailDelete(appName: string, email: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameCollaboratorsEmailDelete(appName, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add collaborator to app
     * @param {string} appName 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameCollaboratorsEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameCollaboratorsEmailPost(appName, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List app collaborators
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameCollaboratorsGet(appName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameCollaboratorsGet(appName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an app
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDelete(appName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDelete(appName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove deployment
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsDeploymentNameDelete(appName: string, deploymentName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsDeploymentNameDelete(appName, deploymentName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get deployment details
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsDeploymentNameGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsDeploymentNameGet(appName, deploymentName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get deployment metrics
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsDeploymentNameMetricsGet(appName: string, deploymentName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsDeploymentNameMetricsGet(appName, deploymentName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update deployment
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsDeploymentNamePatch(appName: string, deploymentName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsDeploymentNamePatch(appName, deploymentName, managementAppsAppNamePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Release new package version
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {any} _package 
     * @param {string} packageInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsDeploymentNameReleasePost(appName: string, deploymentName: string, _package: any, packageInfo: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsDeploymentNameReleasePost(appName, deploymentName, _package, packageInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rollback deployment to previous release
     * @param {string} appName 
     * @param {string} deploymentName 
     * @param {string} [targetRelease] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost(appName: string, deploymentName: string, targetRelease?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsDeploymentNameRollbackTargetReleasePost(appName, deploymentName, targetRelease, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List app deployments
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsGet(appName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsGet(appName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new deployment
     * @param {string} appName 
     * @param {ManagementAppsAppNameDeploymentsPostRequest} [managementAppsAppNameDeploymentsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsPost(appName: string, managementAppsAppNameDeploymentsPostRequest?: ManagementAppsAppNameDeploymentsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsPost(appName, managementAppsAppNameDeploymentsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Promote deployment to another deployment
     * @param {string} appName 
     * @param {string} sourceDeploymentName 
     * @param {string} destDeploymentName 
     * @param {ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest} [managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost(appName: string, sourceDeploymentName: string, destDeploymentName: string, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest?: ManagementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePost(appName, sourceDeploymentName, destDeploymentName, managementAppsAppNameDeploymentsSourceDeploymentNamePromoteDestDeploymentNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get app details
     * @param {string} appName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameGet(appName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameGet(appName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update app details
     * @param {string} appName 
     * @param {ManagementAppsAppNamePatchRequest} [managementAppsAppNamePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNamePatch(appName: string, managementAppsAppNamePatchRequest?: ManagementAppsAppNamePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNamePatch(appName, managementAppsAppNamePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer app ownership
     * @param {string} appName 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsAppNameTransferEmailPost(appName: string, email: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsAppNameTransferEmailPost(appName, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ManagementAppsPostRequest} [managementAppsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public managementAppsPost(managementAppsPostRequest?: ManagementAppsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).managementAppsPost(managementAppsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



